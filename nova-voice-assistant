import speech_recognition as sr
import pyttsx3
import os
import datetime
import subprocess
import sys
import pywhatkit
import time

# Initialize the text-to-speech engine
engine = pyttsx3.init()
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[1].id)  # Select female voice; change index if needed

# Initialize speech recognizer
recognizer = sr.Recognizer()

# List to hold to-do tasks in-memory
todo_list = []

def speak(text):
    """
    Convert text to speech and play it aloud.
    """
    engine.say(text)
    engine.runAndWait()

def save_log(text):
    """
    Append recognized command text to a log file with a timestamp.
    This helps track interactions and debug later.
    """
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with open("nova_log.txt", "a") as f:
        f.write(f"[{timestamp}] {text}\n")

def open_software(software_name):
    """
    Opens software or websites based on the user's voice command.
    Recognizes Chrome, Edge, Notepad, Calculator, and YouTube playback.
    """
    software_name = software_name.lower()

    if 'chrome' in software_name:
        speak('Opening Chrome...')
        program = r"C:\Program Files\Google\Chrome\Application\chrome.exe"
        subprocess.Popen([program])

    elif 'microsoft edge' in software_name:
        speak('Opening Microsoft Edge...')
        program = r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
        subprocess.Popen([program])

    elif 'play' in software_name and 'youtube' not in software_name:
        # If user says “play [song]” (without explicitly saying YouTube), play on YouTube
        speak('Playing on YouTube...')
        pywhatkit.playonyt(software_name.replace('play', '').strip())

    elif 'youtube' in software_name:
        # Open YouTube homepage if only “youtube” is said
        speak('Opening YouTube...')
        pywhatkit.playonyt('')

    elif 'notepad' in software_name:
        speak('Opening Notepad...')
        subprocess.Popen(['notepad.exe'])

    elif 'calculator' in software_name:
        speak('Opening Calculator...')
        subprocess.Popen(['calc.exe'])

    else:
        speak(f"I couldn't find the software {software_name}")

def close_software(software_name):
    """
    Closes running applications based on the software name.
    Uses Windows taskkill commands.
    """
    software_name = software_name.lower()

    if 'chrome' in software_name:
        speak('Closing Chrome...')
        os.system("taskkill /f /im chrome.exe")

    elif 'microsoft edge' in software_name:
        speak('Closing Microsoft Edge...')
        os.system("taskkill /f /im msedge.exe")

    elif 'notepad' in software_name:
        speak('Closing Notepad...')
        os.system("taskkill /f /im notepad.exe")

    elif 'calculator' in software_name:
        speak('Closing Calculator...')
        os.system("taskkill /f /im calculator.exe")

    else:
        speak(f"I couldn't find any open software named {software_name}")

def add_to_todo(task):
    """
    Add a task string to the in-memory to-do list.
    """
    todo_list.append(task)
    speak(f"Task added: {task}")

def show_todo():
    """
    Speak out all tasks currently in the to-do list.
    """
    if todo_list:
        speak("Here are your tasks:")
        for task in todo_list:
            speak(task)
    else:
        speak("Your to-do list is empty.")

def set_reminder(minutes):
    """
    Waits for the specified number of minutes, then speaks a reminder.
    Simple blocking reminder (can be improved to non-blocking later).
    """
    try:
        minutes = int(minutes)
        speak(f"Setting a reminder for {minutes} minute{'s' if minutes > 1 else ''}.")
        time.sleep(minutes * 60)  # Sleep blocks the program here
        speak("Reminder time reached!")
    except ValueError:
        speak("Sorry, I couldn't understand the duration.")

def listen_for_wake_word():
    """
    Listens continuously for the wake word 'nova'.
    Once detected, it returns True to start command processing.
    """
    with sr.Microphone() as source:
        print('Listening for wake word...')
        while True:
            # Adjust for ambient noise to reduce errors
            recognizer.adjust_for_ambient_noise(source, duration=0.5)
            recorded_audio = recognizer.listen(source)

            try:
                # Use Google's speech recognition
                text = recognizer.recognize_google(recorded_audio, language='en_US')
                text = text.lower()

                if 'nova' in text:
                    print('Wake word detected!')
                    speak('Hi Sir, how can I help you?')
                    return True

            except sr.UnknownValueError:
                # Could not understand audio, skip and keep listening
                print("Could not understand audio, please try again.")
            except sr.RequestError:
                # API unreachable
                speak("Sorry, my speech service is down.")
                return False

def cmd():
    """
    Processes a single user command after wake word detected.
    Handles commands like opening apps, time, jokes, to-do list, reminders, etc.
    """
    with sr.Microphone() as source:
        print('Clearing background noise... please wait!')
        recognizer.adjust_for_ambient_noise(source, duration=0.5)
        print('Listening for your command...')
        recorded_audio = recognizer.listen(source)

    try:
        text = recognizer.recognize_google(recorded_audio, language='en_US')
        text = text.lower()
        print('Your message:', text)
        save_log(text)  # Save command to log

    except sr.UnknownValueError:
        speak("Sorry, I did not catch that. Please say it again.")
        return

    except sr.RequestError:
        speak("Sorry, my speech service is down.")
        return

    # Command handling logic starts here:

    if 'stop' in text or 'exit' in text or 'quit' in text:
        speak('Stopping the program. Goodbye!')
        sys.exit()

    elif 'open' in text:
        # Open software command
        software_name = text.replace('open', '').strip()
        open_software(software_name)

    elif 'close' in text:
        # Close software command
        software_name = text.replace('close', '').strip()
        close_software(software_name)

    elif 'time' in text:
        # Tell the current time
        current_time = datetime.datetime.now().strftime('%I:%M %p')
        speak(f"The time is {current_time}")

    elif 'what is your name' in text or 'who are you' in text:
        # Assistant introduction
        speak('My name is Nova, your personal assistant.')

    elif 'add task' in text or 'add to-do' in text:
        # Add task to to-do list
        task = text.replace('add task', '').replace('add to-do', '').strip()
        if task:
            add_to_todo(task)
        else:
            speak("Please tell me the task to add.")

    elif 'show tasks' in text or 'show to-do' in text or 'list tasks' in text:
        # Show current to-do list
        show_todo()

    elif 'set reminder for' in text:
        # Parse the reminder duration in minutes from the command text
        words = text.split()
        minutes = None
        for i, word in enumerate(words):
            if word == 'for' and i + 1 < len(words):
                try:
                    minutes = int(words[i + 1])
                    break
                except ValueError:
                    continue
        if minutes:
            set_reminder(minutes)
        else:
            speak("Sorry, I couldn't understand the duration.")

    elif 'tell me a joke' in text:
        # Tell a joke
        speak("Why don't scientists trust atoms? Because they make up everything!")

    elif 'fun fact' in text:
        # Share a fun fact
        speak("Did you know? Honey never spoils. Even 3000-year-old pots found in Egyptian tombs were still edible!")

    else:
        # Unknown command
        speak("Sorry, I didn't understand that command. Please try again.")

if __name__ == "__main__":
    # Main program loop:
    # Continuously listen for wake word, then process commands until stopped.
    while True:
        if listen_for_wake_word():
            while True:
                cmd()
